// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "Vimeo.proto" (package "muni", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message muni.ListVideoVideosRequest
 */
export interface ListVideoVideosRequest {
    /**
     * @generated from protobuf field: int32 page = 1;
     */
    page: number;
}
/**
 * @generated from protobuf message muni.ListVideoVideosResponse
 */
export interface ListVideoVideosResponse {
    /**
     * @generated from protobuf field: repeated muni.VimeoVideo videos = 1;
     */
    videos: VimeoVideo[];
}
/**
 * @generated from protobuf message muni.VimeoVideo
 */
export interface VimeoVideo {
    /**
     * @generated from protobuf field: string key = 1;
     */
    key: string;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string url = 3;
     */
    url: string;
    /**
     * @generated from protobuf field: string preview_url = 4;
     */
    previewUrl: string;
    /**
     * @generated from protobuf field: string author_name = 5;
     */
    authorName: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class ListVideoVideosRequest$Type extends MessageType<ListVideoVideosRequest> {
    constructor() {
        super("muni.ListVideoVideosRequest", [
            { no: 1, name: "page", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ListVideoVideosRequest>): ListVideoVideosRequest {
        const message = { page: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListVideoVideosRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListVideoVideosRequest): ListVideoVideosRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 page */ 1:
                    message.page = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListVideoVideosRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 page = 1; */
        if (message.page !== 0)
            writer.tag(1, WireType.Varint).int32(message.page);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message muni.ListVideoVideosRequest
 */
export const ListVideoVideosRequest = new ListVideoVideosRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListVideoVideosResponse$Type extends MessageType<ListVideoVideosResponse> {
    constructor() {
        super("muni.ListVideoVideosResponse", [
            { no: 1, name: "videos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => VimeoVideo }
        ]);
    }
    create(value?: PartialMessage<ListVideoVideosResponse>): ListVideoVideosResponse {
        const message = { videos: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListVideoVideosResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListVideoVideosResponse): ListVideoVideosResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated muni.VimeoVideo videos */ 1:
                    message.videos.push(VimeoVideo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListVideoVideosResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated muni.VimeoVideo videos = 1; */
        for (let i = 0; i < message.videos.length; i++)
            VimeoVideo.internalBinaryWrite(message.videos[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message muni.ListVideoVideosResponse
 */
export const ListVideoVideosResponse = new ListVideoVideosResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VimeoVideo$Type extends MessageType<VimeoVideo> {
    constructor() {
        super("muni.VimeoVideo", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "preview_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "author_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VimeoVideo>): VimeoVideo {
        const message = { key: "", title: "", url: "", previewUrl: "", authorName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VimeoVideo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VimeoVideo): VimeoVideo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string url */ 3:
                    message.url = reader.string();
                    break;
                case /* string preview_url */ 4:
                    message.previewUrl = reader.string();
                    break;
                case /* string author_name */ 5:
                    message.authorName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VimeoVideo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string url = 3; */
        if (message.url !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.url);
        /* string preview_url = 4; */
        if (message.previewUrl !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.previewUrl);
        /* string author_name = 5; */
        if (message.authorName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.authorName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message muni.VimeoVideo
 */
export const VimeoVideo = new VimeoVideo$Type();
/**
 * @generated ServiceType for protobuf service muni.VimeoService
 */
export const VimeoService = new ServiceType("muni.VimeoService", [
    { name: "ListVideoVideos", options: {}, I: ListVideoVideosRequest, O: ListVideoVideosResponse }
]);
