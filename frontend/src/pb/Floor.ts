// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "Floor.proto" (package "muni", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message muni.ListFloorsRequest
 */
export interface ListFloorsRequest {
}
/**
 * @generated from protobuf message muni.ListFloorsResponse
 */
export interface ListFloorsResponse {
    /**
     * @generated from protobuf field: repeated muni.Floor floors = 1;
     */
    floors: Floor[];
}
/**
 * @generated from protobuf message muni.JoinFloorRequest
 */
export interface JoinFloorRequest {
    /**
     * @generated from protobuf field: string floor_id = 1;
     */
    floorId: string;
}
/**
 * @generated from protobuf message muni.JoinFloorResponse
 */
export interface JoinFloorResponse {
    /**
     * @generated from protobuf field: muni.Video video = 1;
     */
    video?: Video;
}
/**
 * @generated from protobuf message muni.CreateFloorRequest
 */
export interface CreateFloorRequest {
    /**
     * @generated from protobuf field: string floor_name = 1;
     */
    floorName: string;
    /**
     * @generated from protobuf field: muni.Host host = 2;
     */
    host?: Host;
    /**
     * @generated from protobuf field: muni.Authentication authentication = 3;
     */
    authentication?: Authentication;
}
/**
 * @generated from protobuf message muni.CreateFloorResponse
 */
export interface CreateFloorResponse {
    /**
     * @generated from protobuf field: string floor_id = 1;
     */
    floorId: string;
}
/**
 * @generated from protobuf message muni.Floor
 */
export interface Floor {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: muni.Host host = 3;
     */
    host?: Host;
    /**
     * @generated from protobuf field: muni.Authentication.Mode authentication = 4;
     */
    authentication: Authentication_Mode;
}
/**
 * @generated from protobuf message muni.Video
 */
export interface Video {
    /**
     * @generated from protobuf oneof: source
     */
    source: {
        oneofKind: "html5Url";
        /**
         * @generated from protobuf field: string html5_url = 1;
         */
        html5Url: string;
    } | {
        oneofKind: "youtubeId";
        /**
         * @generated from protobuf field: string youtube_id = 2;
         */
        youtubeId: string;
    } | {
        oneofKind: "vimeoId";
        /**
         * @generated from protobuf field: uint32 vimeo_id = 3;
         */
        vimeoId: number;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message muni.Host
 */
export interface Host {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message muni.Authentication
 */
export interface Authentication {
    /**
     * @generated from protobuf field: muni.Authentication.Mode mode = 1;
     */
    mode: Authentication_Mode;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
}
/**
 * @generated from protobuf enum muni.Authentication.Mode
 */
export enum Authentication_Mode {
    /**
     * @generated from protobuf enum value: None = 0;
     */
    None = 0,
    /**
     * @generated from protobuf enum value: Password = 1;
     */
    Password = 1
}
/**
 * @generated from protobuf enum muni.VideoType
 */
export enum VideoType {
    /**
     * @generated from protobuf enum value: Html5 = 0;
     */
    Html5 = 0,
    /**
     * @generated from protobuf enum value: YouTube = 1;
     */
    YouTube = 1,
    /**
     * @generated from protobuf enum value: Vimeo = 2;
     */
    Vimeo = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class ListFloorsRequest$Type extends MessageType<ListFloorsRequest> {
    constructor() {
        super("muni.ListFloorsRequest", []);
    }
    create(value?: PartialMessage<ListFloorsRequest>): ListFloorsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListFloorsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListFloorsRequest): ListFloorsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ListFloorsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message muni.ListFloorsRequest
 */
export const ListFloorsRequest = new ListFloorsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListFloorsResponse$Type extends MessageType<ListFloorsResponse> {
    constructor() {
        super("muni.ListFloorsResponse", [
            { no: 1, name: "floors", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Floor }
        ]);
    }
    create(value?: PartialMessage<ListFloorsResponse>): ListFloorsResponse {
        const message = { floors: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListFloorsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListFloorsResponse): ListFloorsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated muni.Floor floors */ 1:
                    message.floors.push(Floor.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListFloorsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated muni.Floor floors = 1; */
        for (let i = 0; i < message.floors.length; i++)
            Floor.internalBinaryWrite(message.floors[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message muni.ListFloorsResponse
 */
export const ListFloorsResponse = new ListFloorsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinFloorRequest$Type extends MessageType<JoinFloorRequest> {
    constructor() {
        super("muni.JoinFloorRequest", [
            { no: 1, name: "floor_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<JoinFloorRequest>): JoinFloorRequest {
        const message = { floorId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<JoinFloorRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinFloorRequest): JoinFloorRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string floor_id */ 1:
                    message.floorId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinFloorRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string floor_id = 1; */
        if (message.floorId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.floorId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message muni.JoinFloorRequest
 */
export const JoinFloorRequest = new JoinFloorRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinFloorResponse$Type extends MessageType<JoinFloorResponse> {
    constructor() {
        super("muni.JoinFloorResponse", [
            { no: 1, name: "video", kind: "message", T: () => Video }
        ]);
    }
    create(value?: PartialMessage<JoinFloorResponse>): JoinFloorResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<JoinFloorResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinFloorResponse): JoinFloorResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* muni.Video video */ 1:
                    message.video = Video.internalBinaryRead(reader, reader.uint32(), options, message.video);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinFloorResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* muni.Video video = 1; */
        if (message.video)
            Video.internalBinaryWrite(message.video, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message muni.JoinFloorResponse
 */
export const JoinFloorResponse = new JoinFloorResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateFloorRequest$Type extends MessageType<CreateFloorRequest> {
    constructor() {
        super("muni.CreateFloorRequest", [
            { no: 1, name: "floor_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "host", kind: "message", T: () => Host },
            { no: 3, name: "authentication", kind: "message", T: () => Authentication }
        ]);
    }
    create(value?: PartialMessage<CreateFloorRequest>): CreateFloorRequest {
        const message = { floorName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateFloorRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateFloorRequest): CreateFloorRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string floor_name */ 1:
                    message.floorName = reader.string();
                    break;
                case /* muni.Host host */ 2:
                    message.host = Host.internalBinaryRead(reader, reader.uint32(), options, message.host);
                    break;
                case /* muni.Authentication authentication */ 3:
                    message.authentication = Authentication.internalBinaryRead(reader, reader.uint32(), options, message.authentication);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateFloorRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string floor_name = 1; */
        if (message.floorName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.floorName);
        /* muni.Host host = 2; */
        if (message.host)
            Host.internalBinaryWrite(message.host, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* muni.Authentication authentication = 3; */
        if (message.authentication)
            Authentication.internalBinaryWrite(message.authentication, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message muni.CreateFloorRequest
 */
export const CreateFloorRequest = new CreateFloorRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateFloorResponse$Type extends MessageType<CreateFloorResponse> {
    constructor() {
        super("muni.CreateFloorResponse", [
            { no: 1, name: "floor_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateFloorResponse>): CreateFloorResponse {
        const message = { floorId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateFloorResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateFloorResponse): CreateFloorResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string floor_id */ 1:
                    message.floorId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateFloorResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string floor_id = 1; */
        if (message.floorId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.floorId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message muni.CreateFloorResponse
 */
export const CreateFloorResponse = new CreateFloorResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Floor$Type extends MessageType<Floor> {
    constructor() {
        super("muni.Floor", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "host", kind: "message", T: () => Host },
            { no: 4, name: "authentication", kind: "enum", T: () => ["muni.Authentication.Mode", Authentication_Mode] }
        ]);
    }
    create(value?: PartialMessage<Floor>): Floor {
        const message = { id: "", name: "", authentication: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Floor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Floor): Floor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* muni.Host host */ 3:
                    message.host = Host.internalBinaryRead(reader, reader.uint32(), options, message.host);
                    break;
                case /* muni.Authentication.Mode authentication */ 4:
                    message.authentication = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Floor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* muni.Host host = 3; */
        if (message.host)
            Host.internalBinaryWrite(message.host, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* muni.Authentication.Mode authentication = 4; */
        if (message.authentication !== 0)
            writer.tag(4, WireType.Varint).int32(message.authentication);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message muni.Floor
 */
export const Floor = new Floor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Video$Type extends MessageType<Video> {
    constructor() {
        super("muni.Video", [
            { no: 1, name: "html5_url", kind: "scalar", oneof: "source", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "youtube_id", kind: "scalar", oneof: "source", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "vimeo_id", kind: "scalar", oneof: "source", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<Video>): Video {
        const message = { source: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Video>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Video): Video {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string html5_url */ 1:
                    message.source = {
                        oneofKind: "html5Url",
                        html5Url: reader.string()
                    };
                    break;
                case /* string youtube_id */ 2:
                    message.source = {
                        oneofKind: "youtubeId",
                        youtubeId: reader.string()
                    };
                    break;
                case /* uint32 vimeo_id */ 3:
                    message.source = {
                        oneofKind: "vimeoId",
                        vimeoId: reader.uint32()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Video, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string html5_url = 1; */
        if (message.source.oneofKind === "html5Url")
            writer.tag(1, WireType.LengthDelimited).string(message.source.html5Url);
        /* string youtube_id = 2; */
        if (message.source.oneofKind === "youtubeId")
            writer.tag(2, WireType.LengthDelimited).string(message.source.youtubeId);
        /* uint32 vimeo_id = 3; */
        if (message.source.oneofKind === "vimeoId")
            writer.tag(3, WireType.Varint).uint32(message.source.vimeoId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message muni.Video
 */
export const Video = new Video$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Host$Type extends MessageType<Host> {
    constructor() {
        super("muni.Host", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Host>): Host {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Host>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Host): Host {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Host, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message muni.Host
 */
export const Host = new Host$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Authentication$Type extends MessageType<Authentication> {
    constructor() {
        super("muni.Authentication", [
            { no: 1, name: "mode", kind: "enum", T: () => ["muni.Authentication.Mode", Authentication_Mode] },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Authentication>): Authentication {
        const message = { mode: 0, password: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Authentication>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Authentication): Authentication {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* muni.Authentication.Mode mode */ 1:
                    message.mode = reader.int32();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Authentication, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* muni.Authentication.Mode mode = 1; */
        if (message.mode !== 0)
            writer.tag(1, WireType.Varint).int32(message.mode);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message muni.Authentication
 */
export const Authentication = new Authentication$Type();
/**
 * @generated ServiceType for protobuf service muni.FloorService
 */
export const FloorService = new ServiceType("muni.FloorService", [
    { name: "ListFloors", options: {}, I: ListFloorsRequest, O: ListFloorsResponse },
    { name: "JoinFloor", serverStreaming: true, options: {}, I: JoinFloorRequest, O: JoinFloorResponse },
    { name: "CreateFloor", options: {}, I: CreateFloorRequest, O: CreateFloorResponse }
]);
