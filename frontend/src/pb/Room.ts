// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "Room.proto" (package "muni", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message muni.ListRoomsRequest
 */
export interface ListRoomsRequest {
}
/**
 * @generated from protobuf message muni.ListRoomsResponse
 */
export interface ListRoomsResponse {
    /**
     * @generated from protobuf field: repeated muni.Room rooms = 1;
     */
    rooms: Room[];
}
/**
 * @generated from protobuf message muni.Room
 */
export interface Room {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: muni.AuthenticationMode authentication = 3;
     */
    authentication: AuthenticationMode;
}
/**
 * @generated from protobuf enum muni.AuthenticationMode
 */
export enum AuthenticationMode {
    /**
     * @generated from protobuf enum value: None = 0;
     */
    None = 0,
    /**
     * @generated from protobuf enum value: Password = 1;
     */
    Password = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class ListRoomsRequest$Type extends MessageType<ListRoomsRequest> {
    constructor() {
        super("muni.ListRoomsRequest", []);
    }
    create(value?: PartialMessage<ListRoomsRequest>): ListRoomsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListRoomsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListRoomsRequest): ListRoomsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ListRoomsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message muni.ListRoomsRequest
 */
export const ListRoomsRequest = new ListRoomsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListRoomsResponse$Type extends MessageType<ListRoomsResponse> {
    constructor() {
        super("muni.ListRoomsResponse", [
            { no: 1, name: "rooms", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Room }
        ]);
    }
    create(value?: PartialMessage<ListRoomsResponse>): ListRoomsResponse {
        const message = { rooms: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListRoomsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListRoomsResponse): ListRoomsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated muni.Room rooms */ 1:
                    message.rooms.push(Room.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListRoomsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated muni.Room rooms = 1; */
        for (let i = 0; i < message.rooms.length; i++)
            Room.internalBinaryWrite(message.rooms[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message muni.ListRoomsResponse
 */
export const ListRoomsResponse = new ListRoomsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Room$Type extends MessageType<Room> {
    constructor() {
        super("muni.Room", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "authentication", kind: "enum", T: () => ["muni.AuthenticationMode", AuthenticationMode] }
        ]);
    }
    create(value?: PartialMessage<Room>): Room {
        const message = { id: "", name: "", authentication: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Room>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Room): Room {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* muni.AuthenticationMode authentication */ 3:
                    message.authentication = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Room, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* muni.AuthenticationMode authentication = 3; */
        if (message.authentication !== 0)
            writer.tag(3, WireType.Varint).int32(message.authentication);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message muni.Room
 */
export const Room = new Room$Type();
/**
 * @generated ServiceType for protobuf service muni.RoomService
 */
export const RoomService = new ServiceType("muni.RoomService", [
    { name: "ListRooms", options: {}, I: ListRoomsRequest, O: ListRoomsResponse }
]);
